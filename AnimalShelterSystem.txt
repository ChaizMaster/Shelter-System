class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class QueueLL:
    def __init__(self):
        self.__head=None
        self.__count=0
        self.__tail=None
    def enqueue(self,data):
        newNode=Node(data)
        if self.__head is None:
            self.__head=newNode
            self.__tail=newNode
            self.__count+=1
            return
        self.__tail.next=newNode
        self.__tail=newNode
        self.__count+=1
        return
    def dequeue(self):
        if self.__head is None:
            return -1
        element=self.__head.data
        temp=self.__head
        self.__head=self.__head.next
        temp.next=None
        self.__count-=1
        return element
    def size(self):
        return self.__count
    def isEmpty(self):
        return self.__count==0
    def front(self):
        return self.__head.data
class AnimalShelter:
    def __init__(self):
        self.dogQueue=QueueLL()
        self.catQueue=QueueLL()
        self.oldestAnimalInShelter=None
    def acceptAnimal(self,animalInfo):
        animalCategory=animalInfo[0]
        animalArrivalTime=animalInfo[1]
        if animalCategory=="DOG":
            self.dogQueue.enqueue(animalArrivalTime)
        else:
            self.catQueue.enqueue(animalArrivalTime)
        self.updateOldestAnimalInfo()
        return
    def updateOldestAnimalInfo(self):
        if self.oldestAnimalInShelter is None or self.catQueue.isEmpty() or self.dogQueue.isEmpty():
            if self.catQueue.isEmpty():
                self.oldestAnimalInShelter=self.dogQueue
            else:
                self.oldestAnimalInShelter=self.catQueue
        else:
            firstDogToArrive=self.dogQueue.front()
            firstCatToArrive=self.catQueue.front()
            if firstDogToArrive>firstCatToArrive:
                self.oldestAnimalInShelter=self.dogQueue
            else:
                self.oldestAnimalInShelter=self.catQueue
        return
    def dequeueCat(self):
        if self.catQueue.isEmpty():
            print("We Regret To inform you that no cats are available in the shelter at the moment! Please come by some other day")
            return
        arrivalTimeOfTheCat=self.catQueue.dequeue()
        self.updateOldestAnimalInfo()
        return arrivalTimeOfTheCat
    def dequeueDog(self):
        if self.dogQueue.isEmpty():
            print("We Regret To inform you that no dogs are available in the shelter at the moment! Please come by some other day")
            return
        arrivalTimeOfTheDog=self.dogQueue.dequeue()
        self.updateOldestAnimalInfo()
        return arrivalTimeOfTheDog
    def dequeueOldest(self):
        if self.oldestAnimalInShelter==None or self.oldestAnimalInShelter.isEmpty()==True:
            print("We Regret To inform you that no animals are available in the shelter at the moment! Please come by some other day")
            return
        arrivalTimeOfTheAnimal=self.oldestAnimalInShelter.dequeue()
        self.updateOldestAnimalInfo()
        return arrivalTimeOfTheAnimal
    